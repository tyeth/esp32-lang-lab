name: Run ESP32 CircuitPython examples and upload results to GitHub Release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Upload to specific release"
        required: true
        default: 'v0.0.9'
      skip_projects:
        description: "Skip projects during build (e.g. esp32-c3-devkit-rust)"
        required: false
        default: ''
      wokwi_timeout:
        description: "Timeout for wokwi tests (ms)"
        required: true
        default: '95000'
env:
  # Setting an environment variable with the value of a configuration variable
  PROJECT: ${{ vars.PROJECT }}
  OUTPUT_TXT: ${{ vars.OUTPUT_TXT }}
  WOKWI_TIMEOUT: ${{ github.event.inputs.wokwi_timeout }}

jobs:
  get_release:
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.url }}
    steps:
      - uses: octokit/request-action@v2.x
        id: get_release
        with:
          route: GET /repos/{owner}/{repo}/releases/tags/${{ github.event.inputs.release_tag }}
          owner: tyeth
          repo: esp32-lang-lab
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: get upload url
        id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url' | sed 's/{?name,label}//')
          echo "url=$url" >> $GITHUB_OUTPUT
        env:
          response: ${{ steps.get_release.outputs.data }}

  build:
    runs-on: ubuntu-22.04
    # container:
    #   image: espressif/idf:release-v5.1
    needs: get_release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Wokwi CLI
        shell: bash
        run: |
          curl -L https://wokwi.com/ci/install.sh | sh
      - name: Install littlefs-python and esptool
        shell: bash
        run: |
          pip3 install littlefs-python esptool
      - name: Run tests and upload results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WOKWI_CLI_TOKEN: ${{ secrets.WOKWI_CLI_TOKEN }}
        shell: bash
        continue-on-error: true
        run: |
          echo "PROJECT is $PROJECT"
          echo "OUTPUT_TXT is $OUTPUT_TXT"
          echo "Current dir:"
          pwd
          [ -f results.json ] || echo "{}" > results.json
          mkdir -p $PROJECT
          echo "../tests/python/circuitpython/test-circuitpython.sh" esp32c3 "$(pwd)" "v0.0.1" "\>" $PROJECT/$OUTPUT_TXT
          echo "Done printing thing"
          tree
          for TARGET in esp32s2 esp32 esp32s3 esp32c3 esp32c6 esp32h2; do
            tests/python/circuitpython/test-circuitpython.sh $TARGET "$(pwd)" "${{ github.event.inputs.release_tag }}" > "$PROJECT/$OUTPUT_TXT"

            # Upload log
            set +e
            asset_path="$PROJECT/$OUTPUT_TXT"
            asset_name="$OUTPUT_TXT"
            echo "asset path $asset_path"
            curl \
              --request POST \
              --header "authorization: Bearer $GITHUB_TOKEN" \
              --header "Content-Type: application/octet-stream" \
              --data-binary "@$asset_path" \
              --url "${{ needs.get_release.outputs.upload_url }}?name=${TARGET}_Run${GITHUB_RUN_NUMBER}_${asset_name}"
            
            set -e
            
            echo "Uploaded wokwi report"
            ls $PROJECT/$OUTPUT
            
            # Extract heap size (you might need to adjust the parsing command)
            HEAP_SIZE=$(grep 'Minimum free heap size' ${PROJECT}/${OUTPUT_TXT} | tr -d '\n' | sed -e 's/Minimum free heap size: //' -e 's/ bytes//')
            
            echo "Heap Size:" $HEAP_SIZE

            # Add a new record to the JSON database
            jq --arg target "$TARGET" \
                --arg language "Python" \
                --arg flavor "CircuitPython" \
                --arg example "hello-world" \
                --arg property "heap" \
                --arg value "$HEAP_SIZE" \
                --arg unit "bytes" \
                --arg note "" \
                --arg version "9.0.0-rc.1" \
                --arg timestamp "$(date -Iseconds)" \
                '. += [{
                  target: $target,
                  language: $language,
                  flavor: $flavor,
                  example: $example,
                  property: $property,
                  value: $value,
                  unit: $unit,
                  note: $note,
                  version: $version,
                  timestamp: $timestamp
                }]' results.json > temp.json && rm results.json && mv temp.json results.json

          done

          # Generate report
          echo "| Target | Language | Flavor | Example | Property | Value | Unit | Note | Version | Timestamp |" > report.md
          echo "|--------|----------|--------|---------|----------|-------|------|------|---------|-----------|" >> report.md
          jq -r '.[] | "| \(.target) | \(.language) | \(.flavor) | \(.example) | \(.property) | \(.value) | \(.unit) | \(.note) | \(.version) | \(.timestamp) |"' results.json >> report.md
          asset_path="report.md"
          asset_name="python-circuitpython-hello-world-report.md"
          curl \
            --request POST \
            --header "authorization: Bearer $GITHUB_TOKEN" \
            --header "Content-Type: application/octet-stream" \
            --data-binary "@$asset_path" \
            --url "${{ needs.get_release.outputs.upload_url }}?name=${TARGET}_Run${GITHUB_RUN_NUMBER}_${asset_name}"

          asset_path="results.json"
          asset_name="python-circuitpython-hello-world-results.json"
          curl \
            --request POST \
            --header "authorization: Bearer $GITHUB_TOKEN" \
            --header "Content-Type: application/octet-stream" \
            --data-binary "@$asset_path" \
            --url "${{ needs.get_release.outputs.upload_url }}?name=${TARGET}_Run${GITHUB_RUN_NUMBER}_${asset_name}"
